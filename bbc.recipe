#!/usr/bin/python
# -*- coding: utf-8 -*-

__license__   = 'GPL v3'
__copyright__ = '2011, Feng Li <nemokingdom@gmail.com>'
'''
bbc.co.uk
'''

from calibre.web.feeds.news import BasicNewsRecipe

class NewsRecipeBBC(BasicNewsRecipe):
    title          = u'The BBC'
    __author__     = u'ikindle.mobi'
    description    = u'BBC新闻英文版: Global news and current affairs from the British Broadcasting Corporation'
    language = 'en'
    oldest_article = 1
    max_articles_per_feed = 5
    masthead_url = 'http://ikindle.mobi/media/pic/bbc_chinese.png'                 
    no_stylesheets = True
    remove_attributes = ['width','height', 'href']    
    remove_tags    = [
	    dict(name='div', attrs={'id':['page-bookmark-links-head']}),
	    dict(name='div', attrs={'class':['footer', 'comment-introduction', 'embedded-hyper',
				    'story-feature wide ', 'story-feature related narrow']}),
	    dict(name='form', attrs={'id':'comment-form'}),
	    dict(name='a', attrs={'class':'hidden'}),	    
	    ]
    remove_tags_after = [
	    dict(name='div', attrs={'class':'comment-introduction'}),	    
	    ]

    keep_only_tags = [dict(name='div', attrs={'class':['story-body']})]

    extra_css      = '''
                        body{font-family:Arial,Helvetica,sans-serif; font-size:small; align:left}
                        h1{font-size:130%;color:#222222;}
			span.story-date{float: left;font-style: normal; font-size:60%; color:grey;}
			p.introduction {font-weight: bold;}
			span[style="width:304px;"]{display:block; clear:both; font-size: 90%; color: #333333;}
			span.cross-head{font-size:120%; font-weight:bold; color:#333333; }
                        .sh{font-size:large; font-weight:bold}
                        .cap{font-size:xx-small; }
                        .lu{font-size:xx-small; }
                        .ds{font-size:xx-small; }
                        .mvb{font-size:xx-small;}
                        .by1{font-size:x-small;  color:#666666}
                        .byd{font-size:x-small;}
                     '''

    feeds          = [
                      ('News Front Page', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/front_page/rss.xml'),
                      ('Science/Nature', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/science/nature/rss.xml'),
                      ('Technology', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/technology/rss.xml'),
                      ('Entertainment', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/entertainment/rss.xml'),
                      ('Magazine', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/uk_news/magazine/rss.xml'),
                      ('Business', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/business/rss.xml'),
                      ('Health', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/health/rss.xml'),
                      ('Americas', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/americas/rss.xml'),
                      ('Europe', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/europe/rss.xml'),
                      ('South Asia', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/south_asia/rss.xml'),
                      ('UK', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/uk_news/rss.xml'),
                      ('Asia-Pacific', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/asia-pacific/rss.xml'),
                      ('Africa', 'http://newsrss.bbc.co.uk/rss/newsonline_world_edition/africa/rss.xml'),
                    ]

    def postprocess_html(self, soup, first):

            for tag in soup.findAll(name= 'img', alt=""):
                    tag.extract()

            for item in soup.findAll(align = "right"):
                del item['align']

            for tag in soup.findAll(name=['table', 'tr', 'td']):
                tag.name = 'div'

            return soup



  #  def print_version(self, url):
  #      return url.replace('http://', 'http://newsvote.bbc.co.uk/mpapps/pagetools/print/')


